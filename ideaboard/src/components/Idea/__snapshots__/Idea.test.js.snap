// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Idea rendering renders as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Idea
    currentlyEditing={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <React.Fragment>
        <ForwardRef
          className="lead"
        />
        <ForwardRef />
      </React.Fragment>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            className="lead"
          />,
          <ForwardRef />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": undefined,
            "className": "lead",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": true,
              "rules": Array [
                "
  white-space: nowrap;
  overflow: hidden;
  width: 100%;
  text-overflow: ellipsis;
",
              ],
            },
            "displayName": "styled.p",
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "rules": Array [
                "
  display: block; /* Fallback for non-webkit */
  display: -webkit-box;
  height: ",
                "57.599999999999994",
                "px; /* Fallback for non-webkit */
  margin-bottom: 0;
  font-size: ",
                "16",
                "px;
  line-height: ",
                "1.2",
                ";
  -webkit-line-clamp: ",
                "3",
                ";
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
",
              ],
            },
            "displayName": "styled.p",
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Symbol(react.fragment),
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
  padding: 20px;
  height: 175px;
",
        ],
      },
      "displayName": "Styled(Card)",
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <React.Fragment>
          <ForwardRef
            className="lead"
          />
          <ForwardRef />
        </React.Fragment>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              className="lead"
            />,
            <ForwardRef />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": undefined,
              "className": "lead",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bwzfXH",
                "isStatic": true,
                "rules": Array [
                  "
  white-space: nowrap;
  overflow: hidden;
  width: 100%;
  text-overflow: ellipsis;
",
                ],
              },
              "displayName": "styled.p",
              "render": [Function],
              "styledComponentId": "sc-bwzfXH",
              "target": "p",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-htpNat",
                "isStatic": true,
                "rules": Array [
                  "
  display: block; /* Fallback for non-webkit */
  display: -webkit-box;
  height: ",
                  "57.599999999999994",
                  "px; /* Fallback for non-webkit */
  margin-bottom: 0;
  font-size: ",
                  "16",
                  "px;
  line-height: ",
                  "1.2",
                  ";
  -webkit-line-clamp: ",
                  "3",
                  ";
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
",
                ],
              },
              "displayName": "styled.p",
              "render": [Function],
              "styledComponentId": "sc-htpNat",
              "target": "p",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Symbol(react.fragment),
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": true,
          "rules": Array [
            "
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
  padding: 20px;
  height: 175px;
",
          ],
        },
        "displayName": "Styled(Card)",
        "render": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
